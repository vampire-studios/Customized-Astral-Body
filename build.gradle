plugins {
	id 'maven-publish'
	id "com.modrinth.minotaur" version "2.+"
	id 'io.github.juuxel.loom-quiltflower' version '1.7.+'
	id "org.quiltmc.quilt-mappings-on-loom" version "4.2.+"
	alias(libs.plugins.fabric.loom)
}

archivesBaseName = project.archives_base_name
version = "$mod_version+build.$build_number-${libs.versions.minecraft.get()}"
group = project.maven_group

repositories {
	maven { url = "https://maven.parchmentmc.net/" }
}

loom {
	accessWidenerPath = file("src/main/resources/cab.accesswidener")
}

dependencies {
	minecraft libs.minecraft
	mappings loom.layered {
		it.addLayer(quiltMappings.mappings("org.quiltmc:quilt-mappings:${libs.versions.quilt.mappings.get()}:v2"))
		it.parchment("org.parchmentmc.data:parchment-1.18.2:2022.03.13@zip")
		it.officialMojangMappings {
			setNameSyntheticMembers(false)
		}
	}

	modImplementation libs.fabric.loader

	modImplementation libs.fabric.api
}

processResources {
	inputs.property "version", version

	filesMatching('fabric.mod.json') {
		expand "version": version
	}
}

java {
	withSourcesJar()
	withJavadocJar()
	toolchain.languageVersion = JavaLanguageVersion.of(17)
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
	it.options.encoding = 'UTF-8'
}

compileJava {
	options.compilerArgs += '--enable-preview'
}

jar {
	from('LICENSE') {
		rename {
			"${it}_$archivesBaseName"
		}
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}
	repositories {
		if (project.hasProperty("siphalorMavenUser")) {
			maven {
				name = "Siphalor"
				url = "https://maven.siphalor.de/upload.php"
				credentials {
					username = siphalorMavenUser
					password = siphalorMavenPassword
				}
			}
		}
	}
}